https://www.youtube.com/watch?v=7QomGnOyQoY
https://gamedevacademy.org/learn-and-understand-raycasting-in-unity3d/
float distance = 2;
    void OnMouseDrag()
	{
        Vector3 mousePosition = new Vector3 (Input.mousePosition.x, Input.mousePosition.y, distance);
        Vector3 objPosition = Camera.main.ScreenToWorldPoint (mousePosition);
        transform.position = objPosition;
	}
	
	
	

// Bit shift the index of the layer (8) to get a bit mask
        int layerMask = 1 << 8;

        // This would cast rays only against colliders in layer 8.
        // But instead we want to collide against everything except layer 8. The ~ operator does this, it inverts a bitmask.
        layerMask = ~layerMask;
		
        RaycastHit hit;
        // Does the ray intersect any objects excluding the player layer
        if (Physics.Raycast(transform.position, transform.TransformDirection(Vector3.forward), out hit, Mathf.Infinity, layerMask))
        {
            Debug.DrawRay(transform.position, transform.TransformDirection(Vector3.forward) * hit.distance, Color.red);
            Debug.Log("Did Hit");
        }
        else
        {
            Debug.DrawRay(transform.position, transform.TransformDirection(Vector3.forward) * 1000, Color.green);
            Debug.Log("Did not Hit");
        }
	
	
	
	
	using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class RayCast : MonoBehaviour {


	
	
	// Use this for initialization
	void Start () {
		
	}
	
	// Update is called once per frame
	void Update () {
		 RaycastHit2D hit = Physics2D.Raycast(transform.position, Vector2.right, 0);

        // If it hits something...
        if (hit.collider != null)
        {
			Debug.DrawRay(transform.position, Vector2.right,Color.red);
			Debug.Log("hit");
		}
		else
		Debug.DrawRay(transform.position, Vector2.right,Color.green);
	}
}


SpriteRenderer block;
	// Use this for initialization
	void Start () {
		block=GetComponent<SpriteRenderer>();
	}
	
	// Update is called once per frame
	void Update () {
		int layerMask = 1 << 8;
		layerMask = ~layerMask;
		Collider2D hit=Physics2D.OverlapPoint(transform.position,layerMask);
		if(hit)
		{
			block.color=Color.green;
		}
		else
			block.color=new Color(0f, 0f, 0f, 0.3f);
	}
	
	
	
	//Detect triangle
	SpriteRenderer block;
	public float horizontal_dis;
	public float vertical_dis;
	Collider2D a,b,c;
	// Use this for initialization
	void Start () {
		block=GetComponent<SpriteRenderer>();
	}
	
	// Update is called once per frame
	void Update () {
		int layerMask = 1 << 8;
		layerMask = ~layerMask;
		//Collider2D hit=Physics2D.OverlapPoint(transform.position,layerMask);
		if(transform.rotation.z==0)
		{
			//Calculate 3 points of triangle
			c=Physics2D.OverlapPoint(new Vector2(transform.position.x+horizontal_dis/2,transform.position.y-vertical_dis/3),layerMask);
		    b=Physics2D.OverlapPoint(new Vector2(transform.position.x-horizontal_dis/2,transform.position.y-vertical_dis/3),layerMask);
		    a=Physics2D.OverlapPoint(new Vector2(transform.position.x,transform.position.y+(vertical_dis/3)*2),layerMask);
		}
		else
		{
			//Reverse triangle, calculate 3 points
			c=Physics2D.OverlapPoint(new Vector2(transform.position.x+horizontal_dis/2,transform.position.y+vertical_dis/3),layerMask);
			b=Physics2D.OverlapPoint(new Vector2(transform.position.x-horizontal_dis/2,transform.position.y+vertical_dis/3),layerMask);
			a=Physics2D.OverlapPoint(new Vector2(transform.position.x,transform.position.y-(vertical_dis/3)*2),layerMask);
		}
		
		if(a && b && c)
		{
			block.color=Color.green;
		}
		else
			block.color=new Color(0f, 0f, 0f, 0.3f);
	}
