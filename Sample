https://www.youtube.com/watch?v=7QomGnOyQoY
https://gamedevacademy.org/learn-and-understand-raycasting-in-unity3d/
float distance = 2;
    void OnMouseDrag()
	{
        Vector3 mousePosition = new Vector3 (Input.mousePosition.x, Input.mousePosition.y, distance);
        Vector3 objPosition = Camera.main.ScreenToWorldPoint (mousePosition);
        transform.position = objPosition;
	}
	
	
	

// Bit shift the index of the layer (8) to get a bit mask
        int layerMask = 1 << 8;

        // This would cast rays only against colliders in layer 8.
        // But instead we want to collide against everything except layer 8. The ~ operator does this, it inverts a bitmask.
        layerMask = ~layerMask;
		
        RaycastHit hit;
        // Does the ray intersect any objects excluding the player layer
        if (Physics.Raycast(transform.position, transform.TransformDirection(Vector3.forward), out hit, Mathf.Infinity, layerMask))
        {
            Debug.DrawRay(transform.position, transform.TransformDirection(Vector3.forward) * hit.distance, Color.red);
            Debug.Log("Did Hit");
        }
        else
        {
            Debug.DrawRay(transform.position, transform.TransformDirection(Vector3.forward) * 1000, Color.green);
            Debug.Log("Did not Hit");
        }
	
	
	
	
	using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class RayCast : MonoBehaviour {


	
	
	// Use this for initialization
	void Start () {
		
	}
	
	// Update is called once per frame
	void Update () {
		 RaycastHit2D hit = Physics2D.Raycast(transform.position, Vector2.right, 0);

        // If it hits something...
        if (hit.collider != null)
        {
			Debug.DrawRay(transform.position, Vector2.right,Color.red);
			Debug.Log("hit");
		}
		else
		Debug.DrawRay(transform.position, Vector2.right,Color.green);
	}
}

